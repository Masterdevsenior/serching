import streamlit as st
import pandas as pd
import numpy as np

def get_var(resumen, *keys):
    # Busca variantes de nombre en el resumen
    for k in keys:
        for rk in resumen.keys():
            if rk.lower().replace("/", "_").replace(" ", "_") == k.lower().replace("/", "_").replace(" ", "_"):
                return resumen[rk]
    return "N/A"

def show_hrv_graphs(resumen):
    col1, col2, col3, col4, col5 = st.columns(5)
    with col1:
        st.metric("FC promedio", f"{get_var(resumen, 'frecuencia_cardiaca_prom')} bpm")
    with col2:
        st.metric("FC m√°xima", f"{get_var(resumen, 'frecuencia_cardiaca_max')} bpm")
    with col3:
        st.metric("RMSSD", f"{get_var(resumen, 'HRV_rmssd', 'rmssd')}")
    with col4:
        st.metric("SDNN", f"{get_var(resumen, 'HRV_sdnn', 'sdnn')}")
    with col5:
        st.metric("LF/HF Ratio", f"{get_var(resumen, 'HRV_lf_hf', 'lf/hf', 'lf_hf')}")

    # Gr√°fica de tendencias
    if 'frecuencia_cardiaca_prom' in resumen:
        st.subheader("üìà Tendencias fisiol√≥gicas")
        tiempo = np.linspace(0, 10, 50)
        hr_trend = resumen['frecuencia_cardiaca_prom'] + np.random.normal(0, 5, 50)
        df_trend = pd.DataFrame({
            'Tiempo (min)': tiempo,
            'Frecuencia Card√≠aca (bpm)': hr_trend
        })
        st.line_chart(df_trend.set_index('Tiempo (min)'))

def show_joint_angles(biomecanica):
    st.subheader("ü¶ø An√°lisis de √°ngulos articulares")
    
    # M√©tricas principales
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Flexi√≥n rodilla derecha", f"{get_var(biomecanica, 'KneeFlexExtR.angle')}¬∞")
        st.metric("Flexi√≥n rodilla izquierda", f"{get_var(biomecanica, 'KneeFlexExtL.angle')}¬∞")
    
    with col2:
        st.metric("Flexi√≥n cadera derecha", f"{get_var(biomecanica, 'HipFlexExtR.angle')}¬∞")
        st.metric("Flexi√≥n cadera izquierda", f"{get_var(biomecanica, 'HipFlexExtL.angle')}¬∞")
    
    with col3:
        st.metric("Flexi√≥n tronco", f"{get_var(biomecanica, 'TrunkFlexExt.angle')}¬∞")
        st.metric("Inclinaci√≥n pelvis", f"{get_var(biomecanica, 'PelvisTilt.angle')}¬∞")
    
    # Gr√°ficas de √°ngulos
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("üìà Flexi√≥n de rodillas:")
        rodillas_data = {
            'Rodilla Derecha': [biomecanica.get("KneeFlexExtR.angle", 0)],
            'Rodilla Izquierda': [biomecanica.get("KneeFlexExtL.angle", 0)]
        }
        st.bar_chart(rodillas_data)
    
    with col2:
        st.write("üìà Flexi√≥n de caderas:")
        caderas_data = {
            'Cadera Derecha': [biomecanica.get("HipFlexExtR.angle", 0)],
            'Cadera Izquierda': [biomecanica.get("HipFlexExtL.angle", 0)]
        }
        st.bar_chart(caderas_data)
    
    # An√°lisis de riesgo
    st.subheader("‚ö†Ô∏è An√°lisis de riesgo ergon√≥mico")
    
    riesgos = []
    if biomecanica.get('KneeFlexExtR.angle', 0) > 60:
        riesgos.append("‚ö†Ô∏è Flexi√≥n excesiva de rodilla derecha")
    if biomecanica.get('KneeFlexExtL.angle', 0) > 60:
        riesgos.append("‚ö†Ô∏è Flexi√≥n excesiva de rodilla izquierda")
    if biomecanica.get('TrunkFlexExt.angle', 0) > 30:
        riesgos.append("‚ö†Ô∏è Flexi√≥n excesiva del tronco")
    if biomecanica.get('PelvisTilt.angle', 0) > 15:
        riesgos.append("‚ö†Ô∏è Inclinaci√≥n excesiva de la pelvis")
    
    if riesgos:
        for riesgo in riesgos:
            st.warning(riesgo)
    else:
        st.success("‚úÖ No se detectaron riesgos ergon√≥micos significativos")
